#!/usr/bin/env bash

# golang programming environment installer
# Copyright (C) 2014-2019  <geosoft1@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e

GOPEI_LONG_NAME="Golang Programming Environment Installer"
GOPEI_CODE_NAME=""
GOPEI_AUTHOR="geosoft1@gmail.com"
GOPEI_COPYRIGHT="Copyright (C) 2014-2019  $GOPEI_AUTHOR"
GOPEI_VERSION=2.5.1
GOPEI_STAGE="release"
GOPEI_ROOT=`dirname $0`
GOPEI_NAME=`basename $0`

#-------------------------------------------------------------------------------
COMPILER_VERSION=1.13
IDE_VERSION=36
LINUX_QT_VERSION=5.5.1
MACOS_QT_VERSION=5.9.5

#-------------------------------------------------------------------------------
GOROOT=$HOME/go
GOPATH=$HOME
PATH=$PATH:$GOROOT/bin
IDEROOT=$HOME/liteide

#-------------------------------------------------------------------------------
#get host computer arch (e.g. i686|x86_64|armv6l)
case $(uname -m) in
   i686)
      MACHINE_TYPE=386;;
   x86_64|amd64)
      MACHINE_TYPE=amd64;;
   armv6l|armv7l)
      IS_ARM=1
      MACHINE_TYPE=armv6l;;
   *) echo "Unknown architecture" && exit;;
esac

#get host computer LONG_BIT (e.g 32|64)
MACHINE_BITS=$(getconf LONG_BIT)

#get kernel name (e.g. linux|darwin|freebsd)
KERNEL_NAME=$(uname -s | tr '[:upper:]' '[:lower:]')

#tricky build IS_$(KERNEL_NAME) flag
export IS_$(echo $KERNEL_NAME | tr '[:lower:]' '[:upper:]')=1

#-------------------------------------------------------------------------------
COMPILER_NAME=go$COMPILER_VERSION.$KERNEL_NAME-$MACHINE_TYPE.tar.gz
case $KERNEL_NAME in
linux)
   IDE_NAME=liteidex$IDE_VERSION.$KERNEL_NAME$MACHINE_BITS-qt$LINUX_QT_VERSION.tar.gz
   IDE_RESOURCES=$IDEROOT/share/liteide
   IDE_ENVIRON=$KERNEL_NAME$MACHINE_BITS
   IDE_FONT_FAMILY='family=FreeMono'
   IDE_FONT_SIZE='fontsize=12'
   IDE_GEOMETRY='geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x2\0\0\0\0\0\x9b\0\0\0s\0\0\x3\xba\0\0\x2\xe8\0\0\0\x9b\0\0\0\x91\0\0\x3\xba\0\0\x2\xe8\0\0\0\0\0\0\0\0\x5V)'
   IDE_STATE='state="@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x2\0\0\0\0\0\0\x1\0\0\0\x2\x2\xfc\x2\0\0\0\a\xfb\0\0\0&\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0x\0_\0\x46\0o\0l\0\x64\0\x65\0r\0s\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x1f\0\xff\xff\xff\xfb\0\0\0,\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0x\0_\0O\0p\0\x65\0n\0\x45\0\x64\0i\0t\0o\0r\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x1f\0\xff\xff\xff\xfb\0\0\0.\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0x\0_\0G\0o\0\x43\0l\0\x61\0s\0s\0V\0i\0\x65\0w\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x1f\0\xff\xff\xff\xfb\0\0\0*\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0x\0_\0G\0o\0O\0u\0t\0l\0i\0n\0\x65\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x1f\0\xff\xff\xff\xfb\0\0\0\x38\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0x\0_\0G\0o\0P\0\x61\0\x63\0k\0\x61\0g\0\x65\0\x42\0r\0o\0w\0s\0\x65\0r\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x1f\0\xff\xff\xff\xfb\0\0\0,\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0x\0_\0\x46\0i\0l\0\x65\0S\0y\0s\0t\0\x65\0m\x1\0\0\0\x33\0\0\x2\x2\0\0\0\x84\0\xff\xff\xff\xfb\0\0\0*\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0x\0_\0\x42\0o\0o\0k\0m\0\x61\0r\0k\0s\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x1f\0\xff\xff\xff\0\0\0\x3\0\0\0\0\0\0\0\0\xfc\x1\0\0\0\x1\xfb\0\0\0\x16\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0\x38\0\0\0\0\0\xff\xff\xff\xff\0\0\0S\0\xff\xff\xff\0\0\x1\xfc\0\0\x2\x2\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\x3\0\0\0\0\0\0\0\x1\0\0\0\x16\0s\0i\0\x64\0\x65\0_\0t\0o\0o\0l\0_\0\x31\x3\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\x1\0\0\0\x1\0\0\0\x16\0s\0i\0\x64\0\x65\0_\0t\0o\0o\0l\0_\0\x32\x2\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\x2\0\0\0\x3\0\0\0\x16\0t\0o\0o\0l\0\x62\0\x61\0r\0/\0s\0t\0\x64\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\x16\0t\0o\0o\0l\0\x62\0\x61\0r\0/\0\x65\0n\0v\x1\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\x1a\0t\0o\0o\0l\0\x62\0\x61\0r\0/\0\x62\0u\0i\0l\0\x64\x1\0\0\0\xc0\xff\xff\xff\xff\0\0\0\0\0\0\0\0)"'
   #---
   PROFILE_FILE=$HOME/.bashrc
   test -f ${XDG_CONFIG_HOME:-~/.config}/user-dirs.dirs && source ${XDG_CONFIG_HOME:-~/.config}/user-dirs.dirs;;
darwin)
   IDE_NAME=liteidex$IDE_VERSION.macos-qt$MACOS_QT_VERSION.zip
   IDE_RESOURCES=$IDEROOT/liteide/LiteIDE.app/Contents/Resources/
   IDE_ENVIRON=$KERNEL_NAME$MACHINE_BITS-home
   IDE_FONT_SIZE='fontsize=12'
   IDE_GEOMETRY='geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x2\0\0\0\0\0\xc0\0\0\0\\\0\0\x3\xdf\0\0\x2\xc9\0\0\0\xc0\0\0\0r\0\0\x3\xdf\0\0\x2\xc9\0\0\0\0\0\0\0\0\x4\0)'
   IDE_STATE='state="@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x2\0\0\0\0\0\0\0\xf9\0\0\x2\x1f\xfc\x2\0\0\0\x13\xfb\0\0\0\"\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0\x66\0o\0l\0\x64\0\x65\0r\0s\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0&\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0\x63\0l\0\x61\0s\0s\0v\0i\0\x65\0w\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0\"\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0o\0u\0t\0l\0i\0n\0\x65\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0.\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0g\0o\0p\0\x61\0\x63\0k\0\x62\0r\0o\0w\0s\0\x65\0r\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0(\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0\x66\0i\0l\0\x65\0s\0y\0s\0t\0\x65\0m\x1\0\0\0\x39\0\0\x2q\0\0\0\0\0\0\0\0\xfb\0\0\0\"\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0\x46\0o\0l\0\x64\0\x65\0r\0s\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0(\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0O\0p\0\x65\0n\0\x45\0\x64\0i\0t\0o\0r\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0*\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0G\0o\0\x43\0l\0\x61\0s\0s\0V\0i\0\x65\0w\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0&\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0G\0o\0O\0u\0t\0l\0i\0n\0\x65\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0\x34\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0G\0o\0P\0\x61\0\x63\0k\0\x61\0g\0\x65\0\x42\0r\0o\0w\0s\0\x65\0r\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0(\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0\x46\0i\0l\0\x65\0S\0y\0s\0t\0\x65\0m\x1\0\0\0\x1c\0\0\x2\x64\0\0\0\0\0\0\0\0\xfb\0\0\0&\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0\x42\0o\0o\0k\0m\0\x61\0r\0k\0s\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0&\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0x\0_\0\x46\0o\0l\0\x64\0\x65\0r\0s\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x1c\0\xff\xff\xff\xfb\0\0\0,\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0x\0_\0O\0p\0\x65\0n\0\x45\0\x64\0i\0t\0o\0r\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x1c\0\xff\xff\xff\xfb\0\0\0.\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0x\0_\0G\0o\0\x43\0l\0\x61\0s\0s\0V\0i\0\x65\0w\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x1c\0\xff\xff\xff\xfb\0\0\0*\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0x\0_\0G\0o\0O\0u\0t\0l\0i\0n\0\x65\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x1c\0\xff\xff\xff\xfb\0\0\0\x38\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0x\0_\0G\0o\0P\0\x61\0\x63\0k\0\x61\0g\0\x65\0\x42\0r\0o\0w\0s\0\x65\0r\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x1c\0\xff\xff\xff\xfb\0\0\0,\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0x\0_\0\x46\0i\0l\0\x65\0S\0y\0s\0t\0\x65\0m\x1\0\0\0\x1c\0\0\x2\x1f\0\0\0\x86\0\xff\xff\xff\xfb\0\0\0*\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0x\0_\0\x42\0o\0o\0k\0m\0\x61\0r\0k\0s\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x1c\0\xff\xff\xff\0\0\0\x3\0\0\0\0\0\0\0\0\xfc\x1\0\0\0\x1\xfb\0\0\0\x16\0s\0i\0\x64\0\x65\0_\0\x64\0o\0\x63\0k\0_\0\x38\0\0\0\0\0\xff\xff\xff\xff\0\0\0v\0\xff\xff\xff\0\0\x2\xe\0\0\x2\x1f\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\b\xfc\0\0\0\x3\0\0\0\0\0\0\0\x1\0\0\0\x16\0s\0i\0\x64\0\x65\0_\0t\0o\0o\0l\0_\0\x31\x3\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\x1\0\0\0\x1\0\0\0\x16\0s\0i\0\x64\0\x65\0_\0t\0o\0o\0l\0_\0\x32\x2\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\x2\0\0\0\x3\0\0\0\x16\0t\0o\0o\0l\0\x62\0\x61\0r\0/\0s\0t\0\x64\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\x16\0t\0o\0o\0l\0\x62\0\x61\0r\0/\0\x65\0n\0v\x1\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\x1a\0t\0o\0o\0l\0\x62\0\x61\0r\0/\0\x62\0u\0i\0l\0\x64\x1\0\0\0\xe5\xff\xff\xff\xff\0\0\0\0\0\0\0\0)"'
   #---
   PROFILE_FILE=$HOME/.bash_profile
   LAUNCHER=$(defaults read com.apple.dock | grep _CFURLString\"| awk '/LiteIDE/ {print NR-1}');;
freebsd)
   #---
   PROFILE_FILE=$HOME/.bashrc
   IS_SERVER=1;;
esac

#-------------------------------------------------------------------------------
help()  {
   echo $GOPEI_LONG_NAME
   echo "Usage: $GOPEI_NAME [options]"
   echo "Options:"
   echo "-c        enable classroom mode (Linux only)"
   echo "-g        enable git suppport"
   echo "-h        show this help message and exit"
   echo "-k        show key fingerprint"
   echo "-s        server mode, install golang only"
   echo "-u        uninstall"
   echo "-U        uninstall including .gitconfig file and .ssh folder"
   echo "-q [name] set theme (eg. -q webstorm)"
   echo "-x [name] set color scheme (eg. -x sublime)"
   echo "-v        version"
   exit
}

while getopts ":cgkhsuUr :q:x:v" OPTION; do
case $OPTION in
   c) CLASSROOM_MODE=1;;
   g) GITSERVER=github.com;;
   h) help;;
   k) ssh-add -l -E md5
      exit;;
   s) IS_SERVER=1;;
   u|U)
      #common to all operating systems
      rm -rf $GOROOT
      rm -rf $HOME/gocache/
      rm -rf $IDEROOT
      #rm -rf $HOME/.dlv/
      rm -rf $HOME/.config/liteide/
      #Ubuntu specific
      rm -rf $HOME/.config/gocode/
      rm -rf $HOME/.local/share/applications/liteide.desktop
      #Linux specific
      rm -f $XDG_DESKTOP_DIR/liteide.desktop
      if [ $IS_DARWIN ] && [ $LAUNCHER ]; then
         /usr/libexec/PlistBuddy -c "Delete persistent-apps:$LAUNCHER" ~/Library/Preferences/com.apple.dock.plist
         killall Dock
      fi
      if [ $OPTION == U ]; then
         rm -rf $HOME/.ssh/
         rm -f  $HOME/.gitconfig
      fi
      #restore original profile file
      [ -e $PROFILE_FILE ] && sed -i.bk '/. ~\/.go_profile/d' $PROFILE_FILE
      rm -f $HOME/.go_profile
      rm -f $PROFILE_FILE.bk
      echo "Uninstalled." && exit;;
   q) IDE_QSS='Qss='$OPTARG'.qss';;
   x) IDE_STYLE='style='$OPTARG'.xml';;
   v) echo "$GOPEI_VERSION-$GOPEI_STAGE" && exit;;
   *) echo "Unimplemented option: -$OPTARG" && help;;
   esac
done

clear && echo -e "$GOPEI_LONG_NAME\n$GOPEI_COPYRIGHT"

#-------------------------------------------------------------------------------
echo "Installing $COMPILER_NAME..."
curl -fsSLkOz $COMPILER_NAME storage.googleapis.com/golang/$COMPILER_NAME || exit
tar -x -C $HOME -f $COMPILER_NAME

echo "Create GOPATH"
echo 'GOROOT=${HOME}/go
GOPATH=${HOME}
PATH=$PATH:/${GOROOT}/bin:${GOPATH}/bin
export PATH GOPATH GOROOT' > $HOME/.go_profile
grep -sq '. ~/.go_profile' $PROFILE_FILE || echo '. ~/.go_profile' >> $PROFILE_FILE

echo "Create helloworld program"
mkdir -p $GOPATH/src/helloworld && cp -r $GOROOT/test/helloworld.go $GOPATH/src/helloworld

#-------------------------------------------------------------------------------
if [ $GITSERVER ]; then
   echo "Add git support..."
   #create git configuration if not exist, otherwise use existent (~/.gitconfig)
   if [ -f $HOME/.gitconfig ]; then
      GITUSER=`awk 'NR==2 {print $3}' $HOME/.gitconfig`
      GITEMAIL=`awk 'NR==3 {print $3}' $HOME/.gitconfig`
   else
      echo "Setup git"
      echo -n "Git user ";read GITUSER
      echo -n "Git email [ENTER for $GITUSER@gmail.com] ";read GITEMAIL
      #try to guess git email
      if [ -z "$GITEMAIL" ]; then GITEMAIL="$GITUSER@gmail.com"; fi
      git config --global user.name "$GITUSER"
      git config --global user.email "$GITEMAIL"
   fi
   #generate ssh keys if not exist, otherwise use existent (https://help.github.com/articles/generating-ssh-keys/)
   KEYTYPE="rsa"
   if [ ! -f $HOME/.ssh/id_$KEYTYPE ]; then
      ssh-keygen -qt $KEYTYPE -C "$GITEMAIL" -f $HOME/.ssh/id_$KEYTYPE
      #add a new deploy key on github with api (https://developer.github.com/v3/)
      echo -n "Password:"; read -s GITPASSWORD
      echo 
      KEY=`cat $HOME/.ssh/id_$KEYTYPE.pub`
      #Key management:
      #curl -s -X GET -u $GITUSER:$GITPASSWORD https://api.github.com/user/keys
      #curl -s -X DELETE -u $GITUSER:$GITPASSWORD https://api.github.com/user/keys/13146480
      #curl -s -X POST -u $GITUSER:$GITPASSWORD https://api.github.com/user/keys -d '{"key":"'"${KEY}"'"}'
      curl -s -X POST -u $GITUSER:$GITPASSWORD https://api.$GITSERVER/user/keys -d '{"key":"'"${KEY}"'"}'| awk '/message/ { gsub(/^[\t ]+|[\",]/,"");print }'
   fi
   #bug workaround https://help.github.com/articles/error-permission-denied-publickey
   eval `ssh-agent -s` > /dev/null
   echo "Checking the keys..."
   #workaround: if ssh result is false (Permission denied (publickey).) set -e will stop the script
   #prevent this by changing result code to true and let the script to continue
   ssh -o StrictHostKeyChecking=no -o LogLevel=error -T git@$GITSERVER || true
   #create github.com in $GOPATH
   mkdir -p $GOPATH/src/$GITSERVER/$GITUSER

   echo "Add cloud tools..."
   cp $GOPEI_ROOT/tools/* $GOROOT/bin
fi

#-------------------------------------------------------------------------------
if [ $IS_SERVER ] || [ $IS_ARM ]; then
  echo "Done." && exit
fi

#-------------------------------------------------------------------------------
echo "Installing $IDE_NAME..."
curl -fsSLkOz $IDE_NAME sourceforge.net/projects/liteide/files/x$IDE_VERSION/$IDE_NAME || exit

case $KERNEL_NAME in
linux)
   tar -x -C $HOME -f $IDE_NAME;;
darwin)
   mkdir -p $IDEROOT && unzip -q -o $IDE_NAME -d $IDEROOT;;
esac

#-------------------------------------------------------------------------------
echo "Create liteide.ini.mini"
mkdir -p $HOME/.config/liteide && echo '[FileBrowser]
root='$HOME'/src
synceditor=false
[%General]
Language=en_US
WelcomePageVisible=false
[LitApp]
'$IDE_QSS'
[LiteApp]
ShowEditToolbar=false
FolderShowHidenFiles=true
AutoLoadLastSession=true
SplashVisible=false
[editor]
'$IDE_FONT_FAMILY'
'$IDE_FONT_SIZE'
'$IDE_STYLE'
navbar_visible=false
toolbar_visible=false
[golangdoc]
goroot='$GOROOT'
[liteapp]
family='$IDE_GEOMETRY'
'$IDE_STATE'
[liteenv]
currentenvid='$IDE_ENVIRON'
[liteide]
gopath='$GOPATH'
[output]
'$IDE_FONT_FAMILY'
'$IDE_FONT_SIZE'
' > $HOME/.config/liteide/liteide.ini

#-------------------------------------------------------------------------------
echo "Create some useful resources"
cp -R $GOPEI_ROOT/template/* $IDE_RESOURCES/liteapp/template/
echo >> $IDE_RESOURCES/liteapp/template/project.sub
for project in $GOPEI_ROOT/template/*; do
   #add custom resources as project folder only
   echo `basename $project` >> $IDE_RESOURCES/liteapp/template/project.sub
done
#add custom theme and colors
cp $GOPEI_ROOT/theme/* $IDE_RESOURCES/liteapp/qss/
#add custom snippets
cp $GOPEI_ROOT/go.snippet.json $IDE_RESOURCES/packages/go/

[ $GITSERVER ] && CLOUD_TOOLS="\ngithub\ncloud"
#make the scripts available to ide
echo -e "git add *
git commit -m \"-\" -a
git push
git reset --hard HEAD^
git push origin -f
git pull$CLOUD_TOOLS
go get golang.org/x/tools/cmd/present
go get -u github.com/derekparker/delve/cmd/dlv" > $IDE_RESOURCES/litebuild/command/go.api

#-------------------------------------------------------------------------------
echo "Create smart launcher"
case $KERNEL_NAME in
linux)
   if [ $CLASSROOM_MODE ]; then
      cp $HOME/.config/liteide/liteide.ini $HOME/.config/liteide/liteide.ini.mini
      #add restore command
      RESTORE_INI_MINI_COMMAND="cp $HOME/.config/liteide/liteide.ini.mini $HOME/.config/liteide/liteide.ini;"
   fi
   #create generic .desktop file on desktop
   echo -e "\
   \r[Desktop Entry]
   \rVersion=1.0
   \rName=LiteIDE
   \rComment=LiteIDE is a simple, open source, cross-platform Go IDE. 
   \rExec=sh -c 'eval \`ssh-agent -s\`;$RESTORE_INI_MINI_COMMAND$HOME/liteide/bin/liteide'
   \rIcon=$GOROOT/doc/gopher/gophercolor.png
   \rType=Application" > ${XDG_DESKTOP_DIR}/liteide.desktop

   case $DESKTOP_SESSION in
   ubuntu*)
      #extend .desktop file with some nice options
      if [ $GITSERVER ]; then
         GITACTION="$GITSERVER;"
         GITDESKTOPACTION="[Desktop Action $GITSERVER]
         \rName=$GITSERVER/$GITUSER
         \rExec=xdg-open http://$GITSERVER/$GITUSER"
      fi
      echo -e "\
      \rActions=golang;http;gopath;$GITACTION
      \r\n[Desktop Action golang]
      \rName=golang.org
      \rExec=xdg-open http://golang.org/pkg
      \r\n[Desktop Action http]
      \rName=HTTP server (localhost:8080)
      \rExec=xdg-open http://localhost:8080
      \r\n[Desktop Action gopath]
      \rName=GOPATH
      \rExec=xdg-open ${GOPATH}/src
      \r\n$GITDESKTOPACTION" >> ${XDG_DESKTOP_DIR}/liteide.desktop
      #create directory for liteide.desktop
      mkdir -p $HOME/.local/share/applications/
      #add .desktop file to dash and integrate with unity
      mv ${XDG_DESKTOP_DIR}/liteide.desktop $HOME/.local/share/applications
      #already obsolete Unity interface support
      if [[ $XDG_CURRENT_DESKTOP =~ "Unity" ]]; then
         #get the current launcher favorites list
         LAUNCHER=$(gsettings get com.canonical.Unity.Launcher favorites)
         #skip update if liteide launcher already exists
         if ! [[ $LAUNCHER =~ "liteide.desktop" ]]; then
            LAUNCHER=${LAUNCHER/]/, \'liteide.desktop\']} && sleep 1
            #update the launcher favorites list,in unity changes are shwown immediately.
            gsettings set com.canonical.Unity.Launcher favorites "$LAUNCHER"
         fi
      fi;;
   #generic desktop environment have only a desktop shortcut
   *) chmod +x ${XDG_DESKTOP_DIR}/liteide.desktop;;
   esac;;

darwin)
   if [ -z $LAUNCHER ]; then
      #OS X Dock management
      #defaults read com.apple.dock persistent-apps
      #defaults delete com.apple.dock
      defaults write com.apple.dock persistent-apps -array-add '
<dict>
<key>tile-data</key>
   <dict>
   <key>file-data</key>
      <dict>
      <key>_CFURLString</key><string>'$IDEROOT'/liteide/LiteIDE.app</string>
      <key>_CFURLStringType</key><integer>0</integer>
      </dict>
   </dict>
</dict>'
      killall Dock
   fi;;
esac

#-------------------------------------------------------------------------------
echo "Done."
